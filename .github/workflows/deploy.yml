name: Deploy FastAPI Backend

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/shopping-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/shopping-backend:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Fetch Elastic Beanstalk S3 Bucket
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          S3_BUCKET="elasticbeanstalk-${{ secrets.AWS_REGION }}-${AWS_ACCOUNT_ID}"
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV

      - name: Generate new deployment version
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "VERSION_LABEL=shopping-backend-${TIMESTAMP}" >> $GITHUB_ENV

      - name: Upload Dockerrun.aws.json to S3
        run: |
          aws s3 cp Dockerrun.aws.json s3://$S3_BUCKET/shopping-backend-${VERSION_LABEL}.json

      - name: Ensure Elastic Beanstalk environment exists
        run: |
          EB_ENV_EXISTS=$(aws elasticbeanstalk describe-environments --application-name shopping-backend --environment-names shopping-backend-env --query "Environments" --output text)
          if [[ -z "$EB_ENV_EXISTS" ]]; then
            echo "Elastic Beanstalk environment does not exist. Creating..."
            aws elasticbeanstalk create-environment \
              --application-name shopping-backend \
              --environment-name shopping-backend-env \
              --solution-stack-name "64bit Amazon Linux 2 v5.8.4 running Docker" \
              --option-settings file://eb-options.json
          else
            echo "Elastic Beanstalk environment exists. Skipping creation."
          fi

      - name: Wait for EB environment to be ready
        run: |
          echo "Waiting for Elastic Beanstalk environment to be ready..."
          while true; do
            STATUS=$(aws elasticbeanstalk describe-environments --application-name shopping-backend --environment-names shopping-backend-env --query "Environments[0].Status" --output text)
            echo "Current status: $STATUS"
            if [[ "$STATUS" == "Ready" ]]; then
              break
            fi
            sleep 30
          done

      - name: Retrieve Security Group
        run: |
          SG_ID=$(aws ec2 describe-security-groups --filters "Name=tag:elasticbeanstalk:environment-name,Values=shopping-backend-env" --query "SecurityGroups[0].GroupId" --output text)
          echo "SG_ID=$SG_ID" >> $GITHUB_ENV
          echo "Retrieved Security Group: $SG_ID"

      - name: Update `eb-options.json` with Security Group
        run: |
          jq '. += [{"Namespace": "aws:autoscaling:launchconfiguration", "OptionName": "SecurityGroups", "Value": "'$SG_ID'"}]' eb-options.json > updated-eb-options.json
          mv updated-eb-options.json eb-options.json

      - name: Apply Updated Security Group to EB Environment
        run: |
          aws elasticbeanstalk update-environment \
            --application-name shopping-backend \
            --environment-name shopping-backend-env \
            --option-settings file://eb-options.json

      - name: Create new Elastic Beanstalk application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name shopping-backend \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=$S3_BUCKET,S3Key=shopping-backend-${VERSION_LABEL}.json

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --application-name shopping-backend \
            --environment-name shopping-backend-env \
            --version-label $VERSION_LABEL

      - name: Restart application if needed
        run: |
          aws elasticbeanstalk restart-app-server --environment-name shopping-backend-env

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
